%------------------------- Sort declarations -------------------------------------%


sort State = struct On ? isOn | Off ? isOff;

%------------------------- Map declarations -------------------------------------%

map MAX : Nat;
eqn MAX = 10;

map SPEED_THRESHOLD : Nat;
eqn SPEED_THRESHOLD = 3;


%------------------------- Action declarations -------------------------------------%

% Input actions

act pressOn, pressOff;
pressThrottle : Nat;
act pressBrake, releaseBrake;

act activateCruise, deactivateCruise;
act emergencySignal;

% Battery actions

act getBatteryLevel : Nat;
act getBatteryTemp : Nat;
act conBatteryToMotor : Nat;

% Motor actions

act getSpeed : Nat;
act conMotorToBattery : Nat;
act setMotorRequirePower : Nat;

% Solar Panel actions
act getSolarPower : Nat;
act conSolarPanelToMotor : Nat;
act conSolarPanelToBattery : Nat;

% Mechanical brakes

act activateBrakes, deactivateBrakes;

% External environment/external hazard

act enterSafeMode, exitSafeMode;

% Monitoring system

act sendBatteryLevel : Nat;
act sendBatteryTemp : Nat;
act sendSolarPower : Nat;
act sendSpeed : Nat;

act sendDataS;
act sendDataR;
act sendData;


% Internal actions

act sendStreamDataStart, receiveStreamDataStart, commStreamDataStart;
act sendStreamDataEnd, receiveStreamDataEnd, commStreamDataEnd;

act sendCruiseControlStart, receiveCruiseControlStart, commCruiseControlStart : Nat;
act sendCruiseControlEnd, receiveCruiseControlEnd, commCruiseControlEnd;

act continue;

act test : Bool;

%------------------------- Process declarations -------------------------------------%

%------------------------ Main Processes --------------%

proc Main(on : Bool) = 
	(on)
		-> %sendStreamDataStart . receiveStreamDataEnd .
		 	(
				PowerOff . Main(false)
				+ sum throttle : Nat . (throttle <= MAX)
				->  (
						PressThrottle(throttle) . Main(true)
					)

			)
		<> pressOn . Main(!on);

proc CruiseControl(on : Bool, desiredSpeed : Nat, throttle : Nat) = 
	on	-> 	(
				PowerOff . DeactivateCruise
				+ sum throttle : Nat . (throttle <= MAX)
					->  PressThrottle(throttle) . DeactivateCruise
				+ PressBrake . DeactivateCruise

				+ Cruise(desiredSpeed, throttle)
		   	)
		<>	(
				receiveCruiseControlStart(throttle) . sum currentSpeed : Nat . (currentSpeed <= MAX)
				-> 	CruiseControl(true, currentSpeed, throttle)
			);


proc StreamData = receiveStreamDataStart
				. sum bl : Nat . (bl <= MAX)
					-> 	getBatteryLevel(bl) . sendBatteryLevel(bl) 
						. sum bt : Nat . (bt <= MAX)
							->  getBatteryTemp(bt) . sendBatteryTemp(bt)
								. sum sp : Nat . (sp <= MAX)
								->  getSolarPower(sp) . sendSolarPower(sp)
									. sum s : Nat . (s <= MAX)
									->  getSpeed(s) . sendSpeed(s)
										. sendStreamDataEnd . StreamData;



% ---------------- Auxiliary Processes -------------- %

proc PowerOff = pressOff . conMotorToBattery(0) . conSolarPanelToMotor(0) . conBatteryToMotor(0);

proc PressThrottle(throttle : Nat) = 
			(
				pressThrottle(throttle) . setMotorRequirePower(throttle)
				. 
				% regenerate energy
				(throttle == 0)
					-> sum bl : Nat . (bl <= MAX)
						->  getBatteryLevel(bl)
							. sum bt : Nat . (bt <= MAX)
							->  getBatteryTemp(bl)
							 	. (bl == 10 || bt == 10)
								-> conMotorToBattery(0)
					<> sum sp : Nat . (sp <= MAX)
						-> (
								getSolarPower(sp) . conSolarPanelToMotor(min(sp, throttle))
								. sum bl : Nat . (bl <= MAX)
									-> (bl == 0)
										-> conBatteryToMotor(0)
										<> conBatteryToMotor(max(0, throttle - sp)) . conSolarPanelToBattery(max(0, sp - throttle))
							)
			);

proc DeactivateCruise = deactivateCruise . sendCruiseControlEnd . CruiseControl(false, 0, 0);

proc ActivateCruise(throttle : Nat) = activateCruise . sendCruiseControlStart(throttle) . receiveCruiseControlEnd;

proc PressBrake = 
				pressBrake . conBatteryToMotor(0) . conSolarPanelToMotor(0) . sum currentSpeed : Nat . (currentSpeed <= MAX) -> conMotorToBattery(currentSpeed) . activateBrakes
				+ releaseBrake . conMotorToBattery(0) . deactivateBrakes;

proc Cruise(desiredSpeed : Nat, throttle : Nat) =
									sum currentSpeed : Nat . (currentSpeed <= MAX)
										-> (desiredSpeed - currentSpeed > SPEED_THRESHOLD)
											-> PressThrottle(throttle + 1) . CruiseControl(true, desiredSpeed, throttle + 1)

											<> (currentSpeed - desiredSpeed < SPEED_THRESHOLD)
											 	-> PressThrottle(Int2Nat(Nat2Int(throttle) - 1)) . CruiseControl(true, desiredSpeed, Int2Nat(Nat2Int(throttle) - 1))
											 	<> PressThrottle(throttle) . CruiseControl(true, desiredSpeed, throttle);

proc Test = sum n : Nat . (n < 10) -> pressOn . pressThrottle(n) . Test;



%------------------------- Initialization -------------------------------------%

init
  allow(
    { 
    	pressOn, pressOff, pressThrottle, pressBrake, releaseBrake, activateCruise, deactivateCruise, emergencySignal,
    	getBatteryLevel, getBatteryTemp, conBatteryToMotor, getSpeed, conMotorToBattery, setMotorRequirePower, getSolarPower,
    	conSolarPanelToMotor, conSolarPanelToBattery, activateBrakes, deactivateBrakes, enterSafeMode, exitSafeMode,
    	sendBatteryLevel, sendBatteryTemp, sendSolarPower, sendSpeed, commStreamDataStart, commStreamDataEnd, commCruiseControlStart,
    	commCruiseControlEnd, continue, test

    },
    comm(
      {
      	sendStreamDataStart | receiveStreamDataStart -> commStreamDataStart,
      	sendStreamDataEnd | receiveStreamDataEnd -> commStreamDataEnd,
      	sendCruiseControlStart | receiveCruiseControlStart -> commCruiseControlStart,
      	sendCruiseControlEnd | receiveCruiseControlEnd -> commCruiseControlEnd
      },
      Main(false) || CruiseControl(false, 0, 0) || StreamData
  ));
