true
%%%% 7 %%%%     %true
&&  (
        nu X(level : BatteryLevelStatus = Medium, temp : BatteryTempStatus = Normal, solarPower : Int = 0, speed : Int = 0) .
            ([
                forall level' : BatteryLevelStatus, temp' : BatteryTempStatus, solarPower' : Int, speed' : Int
                 . !getBatteryLevel(level') && !getBatteryTemp(temp') && !pressBrake && !getSolarPower(solarPower') && !getSpeed(speed')
             ]  X(level, temp, solarPower, speed)) && 
            (forall level' : BatteryLevelStatus . [getBatteryLevel(level')]           X(level', temp, solarPower, speed))    &&
            (forall temp' : BatteryTempStatus  . [getBatteryTemp(temp')]            X(level, temp', solarPower, speed))    &&
            (forall solarPower' : Int      . [getSolarPower(solarPower')]   X(level, temp, solarPower', speed))     &&
            (forall speed' : Int           . [getSpeed(speed')]             X(level, temp, solarPower, speed'))     &&

%%%% a %%%%     %true            
            (forall requiredPower : Int . val(requiredPower < solarPower) => [setMotorRequirePower(requiredPower)] mu Y . ([!conSolarPanelToMotor(requiredPower)] Y && <true>true)) &&
            (forall requiredPower : Int . val(level != Full && temp != Overheating && requiredPower < solarPower) => [setMotorRequirePower(requiredPower)] mu Y . ([!conSolarPanelToBattery(solarPower - requiredPower)] Y && <true>true)) &&

%%%% b %%%%     %true
            (forall requiredPower : Int . val(requiredPower >= solarPower) => [setMotorRequirePower(requiredPower)] mu Y . ([!conSolarPanelToMotor(solarPower)] Y && <true>true)) &&
            (forall requiredPower : Int . val(level != Empty && requiredPower >= solarPower) => [setMotorRequirePower(requiredPower)] mu Y . ([!conBatteryToMotor(requiredPower - solarPower)] Y && <true>true))
    )
    