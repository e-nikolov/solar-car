%------------------------- Sort declarations -------------------------------------%


sort StoppingAction = struct OffPressed ? isOffPressed | Green ? isGreen | Yellow ? isYellow;

%------------------------- Map declarations -------------------------------------%

map MAX : Nat;
eqn MAX = 10;


%------------------------- Action declarations -------------------------------------%

% Input actions

act pressOn, pressOff;
pressThrottle : Nat;
act pressBrake, releaseBrake;

act activateCruise, deactivateCruise;
act emergencySignal;

% Battery actions

act getBatteryLevel : Nat;
act getBatteryTemp : Nat;
act conBatteryToMotor : Nat;

% Motor actions

act getSpeed : Nat;
act conMotorToBattery : Nat;
act setMotorRequirePower : Nat;

% Solar Panel actions
act getSolarPower : Nat;
act conSolarPanelToMotor : Nat;
act conSolarPanelToBattery : Nat;

% Mechanical brakes

act activateBrakes, deactivateBrakes;

% External environment/external hazard

act enterSafeMode, exitSafeMode;

% Monitoring system

act sendBatteryLevel : Nat;
act sendBatteryTemp : Nat;
act sendSolarPower : Nat;
act sendSpeed : Nat;

act sendDataS;
act sendDataR;
act sendData;

act continue;

%------------------------- Process declarations -------------------------------------%

%------------------------ Main Processes --------------%

proc Main(on : Boolean) = 
	sendStreamDataStart . receiveStreamDataEnd . Main(true)
	. on
		-> (
			PowerOff . Main(False)
			+ ActivateCruise . Main(true)
			+ sum throttle : Nat . throttle <= MAX
			->  PressThrottle(throttle)
			 	. 	(
				 		ActivateCruise(throttle) . Main(true)
				 		+ Main(true)
			 		)

			+ PressBrake . Main(true)
		<> pressOn . Main(true);

proc CruiseControl(on : Boolean, desiredSpeed : Nat, throttle : Nat) = 
	on	-> 	(
				PowerOff . DeactivateCruise
				+ PressThrottle . DeactivateCruise
				+ PressBrake . DeactivateCruise

				+ Cruise(desiredSpeed, throttle)
		   	)
		<>	(
				receiveCruiseControlStart(throttle) . sum currentSpeed : Nat . currentSpeed <= MAX
				-> 	CruiseControl(true, currentSpeed, throttle)
			);


proc SendData = beginSendDataR
				. sum bl : Nat . bl <= MAX
					-> sum bt : Nat . bt <= MAX
						-> sum sp : Nat . sp <= MAX
							-> sum s : Nat . s <= MAX
								-> getBatteryLevel(bl) . sendBatteryLevel(bl)
								 . getBatteryTemp(bt) . sendBatteryTemp(bt)
								 . getSolarPower(sp) . sendSolarPower(sp)
								 . getSpeed(s) . sendSpeed(s)
								 . endSendDataS . SendData


proc PowerOff = pressOff . conMotorToBattery(0) . conSolarPanelToMotor(0) . conBatteryToMotor(0);

proc PressThrottle = 
			(
				pressThrottle(throttle) . setMotorRequirePower(throttle)
				. 
				% regenerate energy
				(throttle == 0)
					-> sum bl : Nat . bl <= MAX
						-> sum bt : Nat . bt <= MAX
							-> getBatteryLevel(bl) . getBatteryTemp(bl) . bl == 10 || bt == 10
								-> conMotorToBattery(0)
					<> sum solar : Nat . (sp <= MAX)
						-> getSolarPower(sp) . conSolarPanelToMotor(min(sp, throttle))
						. sum  : Nat . bl <= MAX
							-> bl == 0
								-> conBatteryToMotor(0)
								<> conBatteryToMotor(max(0, throttle - sp)) . conSolarPanelToBattery(max(0, sp - throttle))
			);

proc DeactivateCruise = deactivateCruise . sendCruiseControlEnd . CruiseControl(false, 0);

proc ActivateCruise(throttle : Nat) = activateCruise . sendCruiseControlStart . receiveCruiseControlEnd;

proc PressBrake = 

proc Cruise(desiredSpeed : Nat, throttle : Nat) =
									sum currentSpeed : Nat . (currentSpeed <= MAX)
										-> (currentSpeed < desiredSpeed)
											-> CruiseControl(true, desiredSpeed, throttle + 1)
											<> CruiseControl(true, desiredSpeed, throttle - 1)

proc Test = sum n : Nat . (n < 10) -> pressOn . pressThrottle(n) . Test;


% ---------------- Auxiliary Processes -------------- %


%------------------------- Initialization -------------------------------------%

init
  allow(
    { pressOn, pressOff, pressThrottle },
    comm(
      {  },
      Test
  ));
