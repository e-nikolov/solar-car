%------------------------- Sort declarations -------------------------------------%


sort State = struct On ? isOn | Off ? isOff;
sort BatteryLevelStatus = struct Empty ? isEmpty | Medium ? isMedium | Full ? isFull;
sort BatteryTempStatus  = struct Overheating ? isOverheating | Normal ? isNormal;

%------------------------- Map declarations -------------------------------------%

map MAX : Int;
eqn MAX = 10;

map SPEED_THRESHOLD : Int;
eqn SPEED_THRESHOLD = 3;


%------------------------- Action declarations -------------------------------------%

% Input actions

act pressOn, pressOff;
pressThrottle : Int;
act pressBrake, releaseBrake;

act activateCruise : Int;
act deactivateCruise;
act emergencySignal;

% Battery actions

act getBatteryLevel : BatteryLevelStatus;
act getBatteryTemp : BatteryTempStatus;
act conBatteryToMotor : Int;

% Motor actions

act getSpeed : Int;
act conMotorToBattery : Int;
act setMotorRequirePower : Int;

% Solar Panel actions
act getSolarPower : Int;
act conSolarPanelToMotor : Int;
act conSolarPanelToBattery : Int;

% Mechanical brakes

act activateBrakes, deactivateBrakes;

% External environment/external hazard

act enterSafeMode, exitSafeMode;

% Monitoring system

act sendBatteryLevel : BatteryLevelStatus;
act sendBatteryTemp : BatteryTempStatus;
act sendSolarPower : Int;
act sendSpeed : Int;

% Internal actions

act sendStreamDataStart, receiveStreamDataStart, startStreamData;
act sendStreamDataEnd, receiveStreamDataEnd, endStreamData;

act sendCruiseControlStart, receiveCruiseControlStart, startCruiseControl : Int;
act sendCruiseControlEnd, receiveCruiseControlEnd, endCruiseControl;

act continue;

act test : Bool;
act testN : Int;


%------------------------- Process declarations -------------------------------------%

%------------------------ MainController Processes --------------%

proc MainController(on : Bool) = 
	(on)
		-> sendStreamDataStart . receiveStreamDataEnd .
		(
			PowerOff . MainController(false)
			+ sum throttle : Int . (throttle >= 0 && throttle <= MAX)
			->  (
					PressThrottle(throttle, false)
				 	. 	(
					 		ActivateCruise(throttle) . MainController(true)
					 		+ MainController(true)
				 		)
				)

			+ PressBrake . MainController(true)
			)
		<> pressOn . MainController(true);

proc CruiseController(on : Bool, desiredSpeed : Int, curThrottle : Int) = 
	on	-> 	(
				PowerOff . DeactivateCruise
				+ sum throttle : Int . (throttle >= 0 && throttle <= MAX)
					->  PressThrottle(throttle, false) . DeactivateCruise
				+ PressBrake . DeactivateCruise

				+ Cruise(desiredSpeed, curThrottle)
		   	)
		<>	(
				sum throttle : Int . (throttle >= 0 && throttle <= MAX)
					-> receiveCruiseControlStart(throttle)
					. sum currentSpeed : Int . (currentSpeed >= 0 && currentSpeed <= MAX)
						-> 	getSpeed(currentSpeed) . CruiseController(true, currentSpeed, throttle)
			);


proc DataStreamController = receiveStreamDataStart
				. sum bl : BatteryLevelStatus
					. getBatteryLevel(bl) . sendBatteryLevel(bl) 
						. sum bt : BatteryTempStatus
							. getBatteryTemp(bt) . sendBatteryTemp(bt)
								. sum sp : Int . (sp >= 0 && sp <= MAX)
								->  getSolarPower(sp) . sendSolarPower(sp)
									. sum s : Int . (s >= 0 && s <= MAX)
									->  getSpeed(s) . sendSpeed(s)
										. sendStreamDataEnd . DataStreamController;



% ---------------- Auxiliary Processes -------------- %

proc PowerOff = pressOff . conMotorToBattery(0) . conSolarPanelToMotor(0) . conBatteryToMotor(0);

proc PressThrottle(throttle : Int, cruise : Bool) = 
			(
				((cruise == false) 	-> pressThrottle(throttle) . setMotorRequirePower(throttle)
									<> setMotorRequirePower(throttle)
				)

				. 
				
				% regenerate energy
				(throttle == 0)
					-> (sum bl : BatteryLevelStatus
						. 	(getBatteryLevel(bl)
						 	. sum bt : BatteryTempStatus 
								.	(getBatteryTemp(bt) . (bl == Full || bt == Overheating)
										-> conMotorToBattery(0)
										<> conMotorToBattery(5) % TODO change to something else
									)
							)
						)
					<>  (sum sp : Int . (sp >= 0 && sp <= MAX)
						->  (getSolarPower(sp) . conSolarPanelToMotor(min(sp, throttle))
								. sum bl : BatteryLevelStatus
									. 	(getBatteryLevel(bl) . (bl == Empty)
											-> conBatteryToMotor(0)
											<> conBatteryToMotor(max(0, throttle - sp)) . conSolarPanelToBattery(max(0, sp - throttle))
										)
							)
						)
			);

proc DeactivateCruise = deactivateCruise . sendCruiseControlEnd . CruiseController(false, 0, 0);

proc ActivateCruise(throttle : Int) = sendCruiseControlStart(throttle) . receiveCruiseControlEnd;

proc PressBrake = 
				pressBrake . conBatteryToMotor(0) . conSolarPanelToMotor(0) . sum currentSpeed : Int . (currentSpeed >= 0 && currentSpeed <= MAX) -> conMotorToBattery(currentSpeed) . activateBrakes
				+ releaseBrake . conMotorToBattery(0) . deactivateBrakes;

proc Cruise(desiredSpeed : Int, throttle : Int) =
									activateCruise(desiredSpeed) .
									sum currentSpeed : Int . (currentSpeed >= 0 && currentSpeed <= MAX)
										-> getSpeed(currentSpeed) . (desiredSpeed - currentSpeed > SPEED_THRESHOLD && throttle < MAX)
											-> PressThrottle(throttle + 1, true) . CruiseController(true, desiredSpeed, throttle + 1)

											<> (currentSpeed - desiredSpeed < SPEED_THRESHOLD && throttle > 0)
											 	-> PressThrottle(throttle - 1, true) . CruiseController(true, desiredSpeed, throttle - 1)
											 	<> PressThrottle(throttle, true) . CruiseController(true, desiredSpeed, throttle);

proc Test = sum n : Int . (n < 10) -> pressOn . pressThrottle(n) . Test;



%------------------------- Initialization -------------------------------------%

init
  allow(
    { 
    	pressOn, pressOff, pressThrottle, pressBrake, releaseBrake, activateCruise, deactivateCruise, emergencySignal,
    	getBatteryLevel, getBatteryTemp, conBatteryToMotor, getSpeed, conMotorToBattery, setMotorRequirePower, getSolarPower,
    	conSolarPanelToMotor, conSolarPanelToBattery, activateBrakes, deactivateBrakes, enterSafeMode, exitSafeMode,
    	sendBatteryLevel, sendBatteryTemp, sendSolarPower, sendSpeed, startStreamData, endStreamData, startCruiseControl,
    	endCruiseControl, continue, test, testN	

    },
    comm(
      {
      	sendStreamDataStart | receiveStreamDataStart -> startStreamData,
      	sendStreamDataEnd | receiveStreamDataEnd -> endStreamData,
      	sendCruiseControlStart | receiveCruiseControlStart -> startCruiseControl,
      	sendCruiseControlEnd | receiveCruiseControlEnd -> endCruiseControl
      },
      MainController(false) || CruiseController(false, 0, 0) || DataStreamController
  ));
