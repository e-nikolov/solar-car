%------------------------- Sort declarations -------------------------------------%


sort SolarCarState = struct On ? isOn | Off ? isOff;
sort BatteryLevelStatus = struct Empty ? isEmpty | Medium ? isMedium | Full ? isFull;
sort BatteryTempStatus  = struct Overheating ? isOverheating | Normal ? isNormal;

%------------------------- Map declarations -------------------------------------%

map MAX : Int;
eqn MAX = 5;

map SPEED_THRESHOLD : Int;
eqn SPEED_THRESHOLD = 3;


%------------------------- Action declarations -------------------------------------%

% Input actions

act switchOn, switchOff;
    pressThrottle : Int;
    releaseThrottle;
    pressBrake, releaseBrake;

    activateCruise : Int;
    deactivateCruise;

% Battery actions

    getBatteryLevel : BatteryLevelStatus;
    getBatteryTemp : BatteryTempStatus;
    conBatteryToMotor : Int;

% Motor actions

    getSpeed : Int;
    conMotorToBattery : Int;
    setMotorRequirePower : Int;

% Solar Panel actions
    getSolarPower : Int;
    conSolarPanelToMotor : Int;
    conSolarPanelToBattery : Int;

% Mechanical brakes

    activateBrakes, deactivateBrakes;

% Monitoring system

    sendBatteryLevel : BatteryLevelStatus;
    sendBatteryTemp : BatteryTempStatus;
    sendSolarPower : Int;
    sendSpeed : Int;

% Internal actions

    sendStreamDataStart, receiveStreamDataStart, startStreamData;
    sendStreamDataEnd, receiveStreamDataEnd, endStreamData : Int # BatteryLevelStatus # BatteryTempStatus # Int;

    sendCruiseStepStart, receiveCruiseStepStart, startCruiseStep : Int # Int # Int # BatteryLevelStatus # BatteryTempStatus # Int;
    sendCruiseStepEnd, receiveCruiseStepEnd, endCruiseStep : Int;

    sendManagePowerStart, receiveManagePowerStart, startManagePower : Int # Int # BatteryLevelStatus # BatteryTempStatus # Int;
    sendManagePowerEnd, receiveManagePowerEnd, endManagePower;

    continue;

    test : Bool;
    testN : Int;
    newCycle : Bool # Bool # Int # Int;


%------------------------- Process declarations -------------------------------------%

%------------------------ MainController Processes --------------%


proc MainController(on : Bool, cruise : Bool, throttle : Int, desiredSpeed : Int) = 
    (on)
    ->  (
            newCycle(on, cruise, throttle, desiredSpeed)
            . sendStreamDataStart 
            . sum speed : Int, batteryLevel : BatteryLevelStatus, batteryTemp : BatteryTempStatus, solarPower : Int
            . receiveStreamDataEnd(speed, batteryLevel, batteryTemp, solarPower)
            . 
            (
                (batteryLevel == Full || batteryTemp == Overheating) 
                ->  conMotorToBattery(0) . conSolarPanelToBattery(0)
                <>  continue
            )
            . 
            (
                (batteryLevel == Empty) 
                ->  conBatteryToMotor(0)
                <>  continue
            )
            . 
            (
                (solarPower == 0) 
                ->  conSolarPanelToMotor(0) . conSolarPanelToBattery(0)
                <>  continue
            )
            .
            (
                (cruise == true)
                ->  sendCruiseStepStart(throttle, desiredSpeed, speed, batteryLevel, batteryTemp, solarPower)
                    . sum newThrottle : Int . receiveCruiseStepEnd(newThrottle)
                    . MainController(true, true, newThrottle, desiredSpeed)

                + (throttle > 0)
                ->  releaseThrottle . ((cruise) -> deactivateCruise <> continue)
                    . sendManagePowerStart(0, speed, batteryLevel, batteryTemp, solarPower)
                        . receiveManagePowerEnd
                        . MainController(true, false, 0, 0)

                + sum newThrottle : Int . (newThrottle >= 1 && newThrottle <= MAX)
                ->  (
                        pressThrottle(newThrottle) . ((cruise) -> deactivateCruise <> continue)
                        . sendManagePowerStart(newThrottle, speed, batteryLevel, batteryTemp, solarPower)
                        . receiveManagePowerEnd
                        . MainController(true, false, newThrottle, 0)

                    )

                + (cruise == false && throttle == 0 && speed != 0) -> activateCruise(speed) . MainController(true, true, 0, speed)
                + PowerOff . ((cruise) -> deactivateCruise <> continue) . MainController(false, false, 0, 0)
                + PressBrake(speed, batteryLevel, batteryTemp, solarPower, false) . ((cruise) -> deactivateCruise <> continue) . MainController(true, false, throttle, 0)
            )
        )

    <> switchOn . MainController(true, false, 0, 0);


proc PowerController =
    sum throttle : Int, speed : Int, batteryLevel : BatteryLevelStatus, batteryTemp : BatteryTempStatus, solarPower : Int 
    . receiveManagePowerStart(throttle, speed, batteryLevel, batteryTemp, solarPower)
    . setMotorRequirePower(throttle)
    .   
    (
        (throttle == 0)
        ->  ( 
                (batteryLevel == Full || batteryTemp == Overheating)
                ->  conSolarPanelToMotor(0) . conBatteryToMotor(0) . conMotorToBattery(0)
                <>  conSolarPanelToMotor(0) . conBatteryToMotor(0) . conMotorToBattery(speed) . conSolarPanelToBattery(solarPower)
            )
        <>  (
                (solarPower > throttle)
                ->  conMotorToBattery(0) . conBatteryToMotor(0) . conSolarPanelToMotor(throttle)
                    .
                    (batteryLevel == Full || batteryTemp == Overheating)
                    ->  conSolarPanelToBattery(0)
                    <>  conSolarPanelToBattery(solarPower - throttle)
                <>  conSolarPanelToBattery(0) . conMotorToBattery(0) . conSolarPanelToMotor(solarPower)
                    .
                    (batteryLevel == Empty)
                    ->  conBatteryToMotor(0)
                    <>  conBatteryToMotor(throttle - solarPower)
            )
    )
    . sendManagePowerEnd
    . PowerController;


proc CruiseStepController =
    sum throttle : Int, desiredSpeed : Int, currentSpeed : Int, batteryLevel : BatteryLevelStatus, batteryTemp : BatteryTempStatus, solarPower : Int
    . receiveCruiseStepStart(throttle, desiredSpeed, currentSpeed, batteryLevel, batteryTemp, solarPower)
    . 
    (
        (desiredSpeed - currentSpeed > SPEED_THRESHOLD && throttle < MAX)
        ->  sendManagePowerStart(throttle + 1, currentSpeed, batteryLevel, batteryTemp, solarPower) . receiveManagePowerEnd . sendCruiseStepEnd(throttle + 1)

        <>  (currentSpeed - desiredSpeed > SPEED_THRESHOLD && throttle > 0)
            ->  sendManagePowerStart(throttle - 1, currentSpeed, batteryLevel, batteryTemp, solarPower) 
                . receiveManagePowerEnd . sendCruiseStepEnd(throttle - 1)
            <>  sendManagePowerStart(throttle, currentSpeed, batteryLevel, batteryTemp, solarPower) 
                . receiveManagePowerEnd . sendCruiseStepEnd(throttle)
        ) . CruiseStepController;


proc DataStreamController = 
    receiveStreamDataStart
    . sum speed : Int . (speed >= 0 && speed <= MAX)
    ->  getSpeed(speed) . sendSpeed(speed)
        . sum batteryLevel : BatteryLevelStatus
            . getBatteryLevel(batteryLevel) . sendBatteryLevel(batteryLevel) 
                . sum batteryTemp : BatteryTempStatus
                    . getBatteryTemp(batteryTemp) . sendBatteryTemp(batteryTemp)
                        . sum solarPower : Int . (solarPower >= 0 && solarPower <= MAX)
                        ->  getSolarPower(solarPower) . sendSolarPower(solarPower)
                            . sendStreamDataEnd(speed, batteryLevel, batteryTemp, solarPower)
                            . DataStreamController;



% ---------------- Auxiliary Processes -------------- %

proc PowerOff = switchOff . conMotorToBattery(0) . conSolarPanelToMotor(0) . conSolarPanelToBattery(0) . conBatteryToMotor(0);

proc PressBrake(speed : Int, batteryLevel : BatteryLevelStatus, batteryTemp : BatteryTempStatus, solarPower : Int, braking : Bool) = 
                (!braking)
                ->  pressBrake
                    . sendManagePowerStart(0, speed, batteryLevel, batteryTemp, solarPower) . receiveManagePowerEnd 
                    . activateBrakes . PressBrake(speed, batteryLevel, batteryTemp, solarPower, true)
                <>  releaseBrake . conMotorToBattery(0) . deactivateBrakes;


%------------------------- Initialization -------------------------------------%

init hide({continue},
  allow(
    {
        newCycle,
        switchOn, switchOff, pressThrottle, pressBrake, releaseBrake, activateCruise, deactivateCruise,
        getBatteryLevel, getBatteryTemp, conBatteryToMotor, getSpeed, conMotorToBattery, setMotorRequirePower, getSolarPower,
        conSolarPanelToMotor, conSolarPanelToBattery, activateBrakes, deactivateBrakes,
        sendBatteryLevel, sendBatteryTemp, sendSolarPower, sendSpeed, startStreamData, endStreamData, startCruiseStep,
        endCruiseStep, startManagePower, endManagePower, releaseThrottle, continue, test, testN 

    },
    comm(
      {
        sendStreamDataStart     | receiveStreamDataStart    -> startStreamData,
        sendStreamDataEnd       | receiveStreamDataEnd      -> endStreamData,
        sendCruiseStepStart     | receiveCruiseStepStart    -> startCruiseStep,
        sendCruiseStepEnd       | receiveCruiseStepEnd      -> endCruiseStep,
        sendManagePowerStart    | receiveManagePowerStart   -> startManagePower,
        sendManagePowerEnd      | receiveManagePowerEnd     -> endManagePower
      },
      MainController(false, false, 0, 0) || CruiseStepController || DataStreamController || PowerController
  )));