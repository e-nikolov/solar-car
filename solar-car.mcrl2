%------------------------- Sort declarations -------------------------------------%


sort SolarCarState = struct On ? isOn | Off ? isOff;
sort BatteryLevelStatus = struct Empty ? isEmpty | Medium ? isMedium | Full ? isFull;
sort BatteryTempStatus  = struct Overheating ? isOverheating | Normal ? isNormal;

%------------------------- Map declarations -------------------------------------%

map MAX : Int;
eqn MAX = 5;

map SPEED_THRESHOLD : Int;
eqn SPEED_THRESHOLD = 3;


%------------------------- Action declarations -------------------------------------%

% Input actions

act pressOn, pressOff;
pressThrottle : Int;
act pressBrake, releaseBrake;

act activateCruise : Int;
act deactivateCruise;
act emergencySignal;

% Battery actions

act getBatteryLevel : BatteryLevelStatus;
act getBatteryTemp : BatteryTempStatus;
act conBatteryToMotor : Int;

% Motor actions

act getSpeed : Int;
act conMotorToBattery : Int;
act setMotorRequirePower : Int;

% Solar Panel actions
act getSolarPower : Int;
act conSolarPanelToMotor : Int;
act conSolarPanelToBattery : Int;

% Mechanical brakes

act activateBrakes, deactivateBrakes;

% External environment/external hazard

act enterSafeMode, exitSafeMode;

% Monitoring system

act sendBatteryLevel : BatteryLevelStatus;
act sendBatteryTemp : BatteryTempStatus;
act sendSolarPower : Int;
act sendSpeed : Int;

% Internal actions

act sendStreamDataStart, receiveStreamDataStart, startStreamData;
act sendStreamDataEnd, receiveStreamDataEnd, endStreamData : Int # BatteryLevelStatus # BatteryTempStatus # Int;

act sendCruiseStepStart, receiveCruiseStepStart, startCruiseStep : Int # Int # Int # BatteryLevelStatus # BatteryTempStatus # Int;
act sendCruiseStepEnd, receiveCruiseStepEnd, endCruiseStep : Int;

act sendManagePowerStart, receiveManagePowerStart, startManagePower : Int # Int # BatteryLevelStatus # BatteryTempStatus # Int;
act sendManagePowerEnd, receiveManagePowerEnd, endManagePower;

act continue;

act test : Bool;
act testN : Int;
act newCycle : Bool # Bool # Int # Int;


%------------------------- Process declarations -------------------------------------%

%------------------------ MainController Processes --------------%


proc MainController(on : Bool, cruise : Bool, throttle : Int, desiredSpeed : Int) = 
	(on)
		-> 
 		(
 			newCycle(on, cruise, throttle, desiredSpeed)
 			. sendStreamDataStart 
			. sum speed : Int, batteryLevel : BatteryLevelStatus, batteryTemp : BatteryTempStatus, solarPower : Int
			. receiveStreamDataEnd(speed, batteryLevel, batteryTemp, solarPower)
			. 	(
					(cruise == true)
					-> 	sendCruiseStepStart(throttle, desiredSpeed, speed, batteryLevel, batteryTemp, solarPower)
						. sum newThrottle : Int . receiveCruiseStepEnd(newThrottle)
						. MainController(true, true, newThrottle, desiredSpeed)

					+ sum newThrottle : Int . (newThrottle >= 0 && newThrottle <= MAX)
					->  (
							pressThrottle(newThrottle) . deactivateCruise
							. sendManagePowerStart(newThrottle, speed, batteryLevel, batteryTemp, solarPower)
							. receiveManagePowerEnd
							. 
							(
								MainController(true, false, newThrottle, speed)
								+ (cruise == false) -> activateCruise(speed) . MainController(true, true, newThrottle, speed)
							)

						)
					
					+ PowerOff . MainController(false, false, 0, 0)
					+ PressBrake(speed, batteryLevel, batteryTemp) . MainController(true, false, 0, 0)
				)
			)

		<> pressOn . MainController(true, false, 0, 0);


proc PowerController =
	sum throttle : Int, speed : Int, batteryLevel : BatteryLevelStatus, batteryTemp : BatteryTempStatus, solarPower : Int 
	. receiveManagePowerStart(throttle, speed, batteryLevel, batteryTemp, solarPower)
	. setMotorRequirePower(throttle)
	. 	((throttle == 0)
		-> 	(
				(batteryLevel == Full || batteryTemp == Overheating)
				-> 	conMotorToBattery(0)
				<> 	conMotorToBattery(speed)
			)
		<> 	(
				conSolarPanelToMotor(min(solarPower, throttle))
				. 	
				(
					(batteryLevel == Empty)
					->	conBatteryToMotor(0)
					<>	conBatteryToMotor(max(0, throttle - solarPower))
						.
						(
							(batteryLevel == Full || batteryTemp == Overheating)
							->	conSolarPanelToBattery(0)
							<>	conSolarPanelToBattery(max(0, solarPower - throttle))
						)
				)
			)
		)
		. sendManagePowerEnd
		. PowerController;


proc CruiseStepController =
	sum throttle : Int, desiredSpeed : Int, currentSpeed : Int, batteryLevel : BatteryLevelStatus, batteryTemp : BatteryTempStatus, solarPower : Int
	. receiveCruiseStepStart(throttle, desiredSpeed, currentSpeed, batteryLevel, batteryTemp, solarPower)
	. 
	((desiredSpeed - currentSpeed > SPEED_THRESHOLD && throttle < MAX)
	-> 	sendManagePowerStart(throttle + 1, currentSpeed, batteryLevel, batteryTemp, solarPower) . receiveManagePowerEnd . sendCruiseStepEnd(throttle + 1)

	<> (currentSpeed - desiredSpeed < SPEED_THRESHOLD && throttle > 0)
	 	-> sendManagePowerStart(throttle - 1, currentSpeed, batteryLevel, batteryTemp, solarPower) . receiveManagePowerEnd . sendCruiseStepEnd(throttle - 1)
	 	<> sendManagePowerStart(throttle, currentSpeed, batteryLevel, batteryTemp, solarPower) . receiveManagePowerEnd . sendCruiseStepEnd(throttle)
	) . CruiseStepController;


proc DataStreamController = 
	receiveStreamDataStart
	. sum speed : Int . (speed >= 0 && speed <= MAX)
	->  getSpeed(speed) . sendSpeed(speed)
		. sum batteryLevel : BatteryLevelStatus
			. getBatteryLevel(batteryLevel) . sendBatteryLevel(batteryLevel) 
				. sum batteryTemp : BatteryTempStatus
					. getBatteryTemp(batteryTemp) . sendBatteryTemp(batteryTemp)
						. sum solarPower : Int . (solarPower >= 0 && solarPower <= MAX)
						->  getSolarPower(solarPower) . sendSolarPower(solarPower)
							. sendStreamDataEnd(speed, batteryLevel, batteryTemp, solarPower)
							. DataStreamController;



% ---------------- Auxiliary Processes -------------- %

proc PowerOff = pressOff . conMotorToBattery(0) . conSolarPanelToMotor(0) . conSolarPanelToBattery(0) . conBatteryToMotor(0) . deactivateCruise;

proc PressBrake(speed : Int, batteryLevel : BatteryLevelStatus, batteryTemp : BatteryTempStatus) = 
				pressBrake . conBatteryToMotor(0) . conSolarPanelToMotor(0) . activateBrakes
				. 
				(batteryLevel != Full && batteryTemp != Overheating)
				->	conMotorToBattery(speed) 
				+ releaseBrake . conMotorToBattery(0) . deactivateBrakes;


%------------------------- Initialization -------------------------------------%

init hide({continue},
  allow(
    {
    	newCycle,
    	pressOn, pressOff, pressThrottle, pressBrake, releaseBrake, activateCruise, deactivateCruise, emergencySignal,
    	getBatteryLevel, getBatteryTemp, conBatteryToMotor, getSpeed, conMotorToBattery, setMotorRequirePower, getSolarPower,
    	conSolarPanelToMotor, conSolarPanelToBattery, activateBrakes, deactivateBrakes, enterSafeMode, exitSafeMode,
    	sendBatteryLevel, sendBatteryTemp, sendSolarPower, sendSpeed, startStreamData, endStreamData, startCruiseStep,
    	endCruiseStep, startManagePower, endManagePower, continue, test, testN	

    },
    comm(
      {
      	sendStreamDataStart 	| receiveStreamDataStart 	-> startStreamData,
      	sendStreamDataEnd 		| receiveStreamDataEnd 		-> endStreamData,
      	sendCruiseStepStart 	| receiveCruiseStepStart 	-> startCruiseStep,
      	sendCruiseStepEnd	 	| receiveCruiseStepEnd 		-> endCruiseStep,
      	sendManagePowerStart	| receiveManagePowerStart	-> startManagePower,
      	sendManagePowerEnd		| receiveManagePowerEnd		-> endManagePower
      },
      MainController(false, false, 0, 0) || CruiseStepController || DataStreamController || PowerController
  )));